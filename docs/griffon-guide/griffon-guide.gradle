/*
 * Copyright 2008-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'com.bmuschko:gradle-java2html-plugin:2.0'
    }
}

apply plugin: 'org.asciidoctor.convert'
apply plugin: 'com.bmuschko.java2html'

ext.childProjects = [
    ':griffon-core',
    ':griffon-core-compile',
    ':griffon-core-test',
    ':griffon-groovy',
    ':griffon-groovy-compile',
    ':griffon-guice',
    ':griffon-swing',
    ':griffon-javafx',
    ':griffon-lanterna',
    ':griffon-pivot',
    ':griffon-swing-groovy',
    ':griffon-javafx-groovy',
    ':griffon-lanterna-groovy',
    ':griffon-pivot-groovy',
    ':griffon-javafx-test',
    ':griffon-fest-test',
    ':griffon-pivot-test'
]

def sampleApps = []
for (toolkit in ['swing', 'javafx', 'pivot', 'lanterna']) {
    for (lang in ['groovy', 'java']) {
        sampleApps << ":sample-${toolkit}-${lang}".toString()
    }
}
(ext.childProjects + sampleApps).each { evaluationDependsOn it }

dependencies {
    java2html 'de.java2html:java2html:5.0'
}

task copyDocs(type: Copy) {
    destinationDir = "${buildDir}/sources" as File
    project.ext.childProjects.each { projectName ->
        if (projectName.endsWith('-compile')) {
            from(project(projectName).sourceSets.main.allSource) {
                include 'griffon/transform/**/*'
                include 'griffon/metadata/**/*'
            }
        } else {
            from(project(projectName).sourceSets.main.allSource) {
                exclude 'gdsl/*'
                exclude 'dsld/*'
            }
        }
    }
}

task apiDocs(type: Javadoc, dependsOn: copyDocs) {
    source          = copyDocs.destinationDir
    destinationDir  = file("$buildDir/api")
    title           = "Griffon $version"
    classpath       = project.ext.childProjects.collect { projectName ->
        [project(projectName).sourceSets.main.output,
         project(projectName).configurations.compile,
         project(projectName).configurations.compileOnly]
    }.flatten().sum() as FileCollection

    excludes = ['**/*.html', 'META-INF/**', '**/*.groovy']

    options.addBooleanOption('javafx', true)

    options.use         = true
    options.splitIndex  = true
    options.encoding    = 'UTF-8'
    options.author      = true
    options.version     = true
    options.source      = project.sourceCompatibility
    options.overview    = file('src/javadoc/overview.html')
    options.windowTitle = "Griffon $version"
    options.docTitle    = "Griffon $version"
    options.footer      = project.javadocFooter
    options.links       = ['http://www.slf4j.org/apidocs/',
                           'http://junit.org/junit4/javadoc/latest/',
                           'http://aalmiray.github.io/jsr-305/apidocs/',
                           'http://javax-inject.github.io/javax-inject/api/',
                           'http://docs.oracle.com/javase/8/docs/api/',
                           'http://docs.oracle.com/javase/8/javafx/api/',
                           'http://google.github.io/guice/api-docs/4.1/javadoc/',
                           'http://mabe02.github.io/lanterna/apidocs/2.1/',
                           'http://pivot.apache.org/2.0.4/docs/api/',
                           'http://docs.groovy-lang.org/latest/html/api/',
                           'http://aalmiray.github.io/jipsy/apidocs/',
                           'http://aalmiray.github.io/gipsy/apidocs/']

    doLast { task ->
        copy {
            into task.destinationDir
            from rootProject.file('src/javadoc/resources/img/griffon.ico'),
                rootProject.file('src/javadoc/resources/css/stylesheet.css')
        }
        copy {
            into file("${task.destinationDir}/resources")
            from rootProject.file('src/javadoc/resources/img/')
        }
        copy {
            into file("${task.destinationDir}/images/")
            from rootProject.file('src/media/banners/medium.png')
            rename '.*', 'griffon-banner-medium.png'
        }
    }
}

task generateJava2html {
    dependsOn apiDocs
    dependsOn "java2htmlGenerateOverview"
    dependsOn java2htmlConvertCode
}

task sourceJar(type: Jar, dependsOn: copyDocs) {
    archiveName    = "griffon-${project.version}-sources.jar"
    destinationDir = "$buildDir/assemble/jars" as File
    from copyDocs.destinationDir
}

task javadocJar(type: Jar, dependsOn: apiDocs) {
    archiveName    = "griffon-${project.version}-javadoc.jar"
    destinationDir = "$buildDir/assemble/jars" as File
    from apiDocs.destinationDir
}

task sourceHtmlJar(type: Jar, dependsOn: generateJava2html) {
    archiveName    = "griffon-${project.version}-sources-html.jar"
    destinationDir = "$buildDir/assemble/jars" as File
    from java2htmlConvertCode.destDir
}

task docsJar(dependsOn: [sourceJar, javadocJar, sourceHtmlJar]) { }

java2html {
    conversion {
        srcDirs = files(copyDocs.destinationDir)
        tabs = 4
        style = 'kawa'
        addLineAnchors = true
        showFileName = true
        useShortFileName = true
        overwrite = true
        showDefaultTitle = true
    }

    overview {
        windowTitle = "Griffon $version"
        docTitle = "Griffon $version"
        docDescription = """Griffon is a Grails like application framework for developing desktop
                            applications in Groovy. Inspired by Grails, Griffon follows the Convention over
                            Configuration paradigm, paired with an intuitive MVC architecture and a command
                            line interface."""
        icon = rootProject.file('src/javadoc/resources/img/griffon.ico')
        stylesheet = rootProject.file('src/javadoc/resources/css/stylesheet.css')
    }
}

def loadProperties(File file) {
    Properties props = new Properties()
    file.withReader { Reader reader -> props.load(reader) }
    props
}

task sampleStats() {
    doLast {
        sampleApps.each { p -> project(p).tasks.findByName('stats').computeLoc() }
    }
}

asciidoctorj {
    version = asciidoctorjVersion
}

asciidoctor {
    attributes = [
        toc                     : 'left',
        doctype                 : 'book',
        icons                   : 'font',
        encoding                : 'utf-8',
        sectlink                : true,
        sectanchors             : true,
        numbered                : true,
        linkattrs               : true,
        imagesdir               : 'images',
        linkcss                 : true,
        stylesheet              : 'css/style.css',
        'source-highlighter'    : 'coderay',
        'coderay-linenums-mode' : 'table',
        'griffon-version'       : project.version,
        'groovy-version'        : project.groovyVersion,
        'spock-version'         : project.spockVersion,
        'slf4j-version'         : project.slf4jVersion,
        'griffon-group'         : project.group,
        'griffon-source-url'    : project_vcs_url,
        'rootprojectdir'        : rootProject.projectDir.absolutePath,
        'gradle-griffon-version': loadProperties(project(':gradle-griffon-plugin').file('gradle.properties')).version,
        'application-master-pom': loadProperties(project(':application-master-pom').file('gradle.properties')).version
    ]

    sources {
        include 'index.adoc'
    }

    resources {
        from file('src/resources')
        from(rootProject.file('src/media/banners/large.png')) {
            into 'images'
            rename '.*', 'griffon-banner-large.png'
        }
    }
}
asciidoctor.dependsOn sampleStats

task guide(type: Copy, dependsOn: [apiDocs, generateJava2html, asciidoctor, docsJar]) {
    destinationDir = "$buildDir/guide" as File
    from(apiDocs.destinationDir)       { into 'api' }
    from(java2htmlConvertCode.destDir) { into 'api-src'}
    from("${asciidoctor.outputDir}/html5")
    from("$buildDir/assemble/jars")
}

task guideZip(type: Zip, dependsOn: guide) {
    baseName = 'griffon-guide'
    from guide.destinationDir
}
